文件操作如下
进入根目录，输入指令如下：
make            
g++ src/main.cpp -o db
./db load customer                   //载入customer
./db load orders                     //载入orders
./db retrieve orders                 
1                                    //输入^c退出
./db compress orders 1               //压缩
我们的代码定义了两个类和一个主函数，结构如下：
1.主函数里面是接收来自终端的不同命令。（我们这部分还在修改当中，之后会在类里用一个getoperation（）函数来接收命令，但因为参数传递出现了问题和时间有限还没改好）

2.第一个类DBController的作用里面定义了不同函数，分别是实现load,retrieve,compress,join的功能。

3.然后由于compress的操作比较多，我们又定义一个类externsort,把compress细化为file_sort,extern_sort,compress_sort。
（以上结构还在讨论斟酌当中，以后可能会有改进）

所做的优化和发现的问题：
1.读入文件：从getline改用fread最后改用fgets
我们一开始在读入orders.tbl文件的时候是想用getline函数,后来发现文件数据很多，一行一行读入，I/O次数太多以至于时间太慢，效率太低。
后来我们改用用fread读入字符串，但是发现每次读入不能保证是一行，于是每次读入都得判断离换行的距离做额外的维护操作，时间也不是很快。
最后我们改用了fgets函数，因为它每次能读到换行结束，不用做额外操作维护，而且操作时间快。

2.读入文件转换类型：从以‘|’为标识符读入数据到使用sscanf
一开始我转换类型的方法是以‘|’为标志，然后用一个循环，把对应的字符串类型转换为整型或浮点型，用了一个上午才把错误调试完，引入的变量很多，而且代码的简洁度也不好。后来我们用了sscanf类型强制转换，代码量很少而且速度更快。

3.sscanf类型转换问题
一开始我们的shippriority的读入总是出现错误，后来才发现原来前一个数据是orderdate,而我们把类型定位字符串%s，读入的时候总是出现错误，需改为%d-%d-%d才能正常运行。

4.写入文件最后一次处理
因为我们的处理方法是把数据存到数组里，然后有一个计数count和一个判断条件，判断count值为数组长度就写入文件，但是最后一次数组可能不是满的，而我们一开始忽略了，导致最后一小部分数据没有导入。我们的解决办法是在循环之后又执行一次操作写入文件，把剩余的没存满的导入。

5.retrieve查找orderkey值的最后一页处理
一开始我们忽略了最后一页需要特别处理，导致最后一页的数据查找不到陷入了死循环。我们的查找方法是一页一页读入，然后将查找值与开头结尾两个数比较，如果在这一页执行二分查找，如果找不到则范围错误。但是由于最后一页可能是没读满的，所以并不能进入二分查找，也就跳不出循环，所以我们对最后一页做了额外处理。

最后一页处理优化，对页计数改进到直接判断最后一页
一开始我想的办法是在读入的时候就计算页数，然后将最后一页的页数存为全局变量，但发现引入额外变量而且代码复杂度增加。后来改用了一种很简单的方法，就是直接判断这一页第一个值是否比最后一个值大，如果是则为最后一页，因为最后一次读入可能不足一页，那不足一页的数据会是上次读入的。

6.临时文件的命名和删除
临时文件的命名我们是在函数里用sscanf来实现的，由于外排序使用了临时文件，一开始我们没有删除，导致生成的文件很多。

任务一、二完成过程和感想：
由于我们组都是女生，大家对这次的任务内容都比较陌生，都是边学边做，完成这个作业的过程比较艰辛，熬了很多个晚上，翻了很多次书查阅了很多资料，改了很多次代码，但也很庆幸学到了很多东西，收获颇丰。
我们一开始是讨论如何实现以及学习二进制文件的读写，4月24号我们就开始着手这个任务，先是翻读大一上的C语言的相关书籍，重新学习二进制文件的读写。一开始我们对文件的分页存储都很头疼，因为不知道从哪里下手，对磁盘、文件、如何分页也是一头雾水，但经过不断翻阅书籍和小组讨论，我们渐渐明确了思路。之后我们开始着手写代码，第一天写了任务一，但几天后发现任务一的代码有许多需要优化的地方，于是几乎把原来的代码全改了，接下来的任务二我们就特别注意优化和减少代码量，将代码写好后我们才开始讨论代码的结构框架，但由于时间有限，我们的框架还有待改进之处。将这些框架和代码写好后我们开始查错、写makefile，我们在这上面也花了挺多心思，一开始我们的头文件的关联没有写正确，导致make一直出错，但一路写下来，发现我们思路也清晰了很多。查错主要是我们漏了考虑一些特殊情况的处理，因为在写代码的过程中我们都有一直写测试代码，所以大的错误并没有，都是一些细节，这次的查错也让我们受益匪浅，发现了挺多平时没有关注的东西。
