Description
This project is a simple database management system implemented by C++. It supports manapulations on large dataset. 
The operations include merge, sort, compress dataset and retrieve target value in the large dataset.

Run the project like this:
enter into the root directory，run the following command：
make            
g++ src/main.cpp -o db
./db load customer                   //load customer
./db load orders                     //load orders
./db retrieve orders                 
1                                    //enter ^c to exit
./db compress orders 1               //compress



The code defines two classes and a main function, the structure is as follows:
1. The main function is to receive different commands from the terminal. (I am still modifying this part, 
and then I will use a getoperation() function to receive the command in the class, but it hasn't been changed 
because of the problem of parameter passing and time limitation.)

2. The role of the first class DBController defines different functions, which are the functions of load, 
retrieve, compress, and join.

3. Since the operation of compress is comparatively more, I also define a class externsort, compressing 
it into file_sort, extern_sort, and compress_sort.
(The above structure is still under discussion and may be improved in the future)

The optimizations made and problems found:
1. Read the file: Use fread from getline and use fgets instead
When I first read in the orders.tbl file, I wanted to use the getline function. But I found that there 
were many file data, which were read one by one. The number of I/Os was too high and the time was too slow 
and the efficiency was too low. Later, I used fread to read in the string, but found that each reading can 
not be guaranteed to be a line, so each time reading has to determine the distance from the line for additional
maintenance operations, time is not fast.
Finally, I use the fgets function, because it can read the end of the line feed every time, without any 
additional operation and maintenance, and the operation time is fast.

2. Read file conversion type: read data from id with ‘|’ to use sscanf
In the beginning, I converted the type of the symbol is marked with '|', and then use a loop, the corresponding
string type is converted to integer or floating-point type, use a morning to debug the error, the introduction 
of many variables, And the simplicity of the code is not good. Later I used the sscanf type cast, the code 
amount is very small and faster.

3.sscanf type conversion problem
At first, our shippriority read always went wrong, and later I found out that the previous data was orderdate, 
and I always typed the string %s, and when reading it, we always got an error and we needed to change it to 
%d-%d. -%d can operate normally.

4. Write the file for the last time
Because our processing method is to store data in an array, and then there is a count count and a judgment 
condition, determine the count value is written to the file length, but the last array may not be full, and 
I initially ignored, Causes the last small piece of data not to be imported. Our solution is to perform 
another operation after the loop to write the file and import the remaining unfilled ones.

5.retrieve to find the last page of the orderkey value processing
At the beginning I ignored the last page that needed special treatment, resulting in the last page of data not 
being found in an endless loop. Our search method is to read one page at a time, and then compare the search 
value with the first two ends. If you perform a binary search on this page, the range is incorrect if it cannot 
be found. However, since the last page may not be full, I cannot enter the binary search, and we cannot skip the
loop, so I do additional processing on the last page.

The last page deals with optimizations, improving page counts to directly determine the last page
In the beginning, the way I thought about it was to calculate the number of pages when reading in, and then 
save the last page number as a global variable, but found that introducing extra variables and increasing code
complexity. Later, a very simple method was used, which is to directly determine whether the first value of 
this page is greater than the last value, if it is the last page, because the last read may be less than one page,
that is less than a page The data will be read last time.

6. Name and delete temporary files
The naming of the temporary file is implemented by sscanf in the function. Since the external sort uses the 
temporary file, I did not delete it at the beginning, resulting in a lot of generated files.

